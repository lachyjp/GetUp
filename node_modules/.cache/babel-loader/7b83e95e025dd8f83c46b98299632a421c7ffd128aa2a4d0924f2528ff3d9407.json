{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\inbox\\\\My Files\\\\GitHub\\\\GetUp\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport LoginForm from './components/LoginForm';\nimport Dashboard from './components/Dashboard';\nimport { useUpBankData } from './hooks/useUpBankData';\n\n// Types for our app\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // Use our custom hook for Up Bank data\n  const {\n    accounts,\n    transactions,\n    loading,\n    error,\n    fetchData,\n    refreshData,\n    clearData\n  } = useUpBankData();\n\n  // Main app state\n  const [state, setState] = useState({\n    isLoggedIn: false,\n    userData: null,\n    accounts: [],\n    transactions: [],\n    loading: false,\n    error: null\n  });\n\n  // Function to handle login\n  const handleLogin = async userData => {\n    setState(prev => ({\n      ...prev,\n      isLoggedIn: true,\n      userData,\n      loading: true,\n      error: null\n    }));\n\n    // Fetch data from Up Bank API\n    await fetchData(userData);\n  };\n\n  // Function to handle logout\n  const handleLogout = () => {\n    setState({\n      isLoggedIn: false,\n      userData: null,\n      accounts: [],\n      transactions: [],\n      loading: false,\n      error: null\n    });\n    clearData();\n  };\n\n  // Function to handle refresh\n  const handleRefresh = async () => {\n    if (state.userData) {\n      await refreshData(state.userData);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-center mb-4\",\n        children: \"GetUp \\u2191\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), !state.isLoggedIn ? /*#__PURE__*/_jsxDEV(LoginForm, {\n        onLogin: handleLogin\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Dashboard, {\n        state: {\n          ...state,\n          accounts,\n          transactions,\n          loading,\n          error\n        },\n        onLogout: handleLogout,\n        onRefresh: handleRefresh\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"ZXeSVMhKPgYf1TzVvuhACIVl+V0=\", false, function () {\n  return [useUpBankData];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","LoginForm","Dashboard","useUpBankData","jsxDEV","_jsxDEV","App","_s","accounts","transactions","loading","error","fetchData","refreshData","clearData","state","setState","isLoggedIn","userData","handleLogin","prev","handleLogout","handleRefresh","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onLogin","onLogout","onRefresh","_c","$RefreshReg$"],"sources":["C:/Users/inbox/My Files/GitHub/GetUp/src/App.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport LoginForm from './components/LoginForm';\nimport Dashboard from './components/Dashboard';\nimport { useUpBankData } from './hooks/useUpBankData';\n\n// Types for our app\nexport interface UserData {\n  apiKey: string;\n  userName: string;\n  transactionCount: number;\n}\n\nexport interface Account {\n  id: string;\n  name: string;\n  balance: number;\n  type: string;\n  owner: string;\n}\n\nexport interface Transaction {\n  id: string;\n  description: string;\n  amount: number;\n  type: string;\n  status: string;\n  date: string;\n  time: string;\n  text: string;\n  message: string;\n  roundup: string;\n}\n\nexport interface AppState {\n  isLoggedIn: boolean;\n  userData: UserData | null;\n  accounts: Account[];\n  transactions: Transaction[];\n  loading: boolean;\n  error: string | null;\n}\n\nfunction App() {\n  // Use our custom hook for Up Bank data\n  const {\n    accounts,\n    transactions,\n    loading,\n    error,\n    fetchData,\n    refreshData,\n    clearData\n  } = useUpBankData();\n\n  // Main app state\n  const [state, setState] = useState<AppState>({\n    isLoggedIn: false,\n    userData: null,\n    accounts: [],\n    transactions: [],\n    loading: false,\n    error: null\n  });\n\n  // Function to handle login\n  const handleLogin = async (userData: UserData) => {\n    setState(prev => ({\n      ...prev,\n      isLoggedIn: true,\n      userData,\n      loading: true,\n      error: null\n    }));\n    \n    // Fetch data from Up Bank API\n    await fetchData(userData);\n  };\n\n  // Function to handle logout\n  const handleLogout = () => {\n    setState({\n      isLoggedIn: false,\n      userData: null,\n      accounts: [],\n      transactions: [],\n      loading: false,\n      error: null\n    });\n    clearData();\n  };\n\n  // Function to handle refresh\n  const handleRefresh = async () => {\n    if (state.userData) {\n      await refreshData(state.userData);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <h1 className=\"text-center mb-4\">GetUp â†‘</h1>\n        \n        {!state.isLoggedIn ? (\n          <LoginForm onLogin={handleLogin} />\n        ) : (\n          <Dashboard \n            state={{\n              ...state,\n              accounts,\n              transactions,\n              loading,\n              error\n            }}\n            onLogout={handleLogout}\n            onRefresh={handleRefresh}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,sCAAsC;AAC7C,OAAO,WAAW;AAClB,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,SAASC,aAAa,QAAQ,uBAAuB;;AAErD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAqCA,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb;EACA,MAAM;IACJC,QAAQ;IACRC,YAAY;IACZC,OAAO;IACPC,KAAK;IACLC,SAAS;IACTC,WAAW;IACXC;EACF,CAAC,GAAGX,aAAa,CAAC,CAAC;;EAEnB;EACA,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAW;IAC3CiB,UAAU,EAAE,KAAK;IACjBC,QAAQ,EAAE,IAAI;IACdV,QAAQ,EAAE,EAAE;IACZC,YAAY,EAAE,EAAE;IAChBC,OAAO,EAAE,KAAK;IACdC,KAAK,EAAE;EACT,CAAC,CAAC;;EAEF;EACA,MAAMQ,WAAW,GAAG,MAAOD,QAAkB,IAAK;IAChDF,QAAQ,CAACI,IAAI,KAAK;MAChB,GAAGA,IAAI;MACPH,UAAU,EAAE,IAAI;MAChBC,QAAQ;MACRR,OAAO,EAAE,IAAI;MACbC,KAAK,EAAE;IACT,CAAC,CAAC,CAAC;;IAEH;IACA,MAAMC,SAAS,CAACM,QAAQ,CAAC;EAC3B,CAAC;;EAED;EACA,MAAMG,YAAY,GAAGA,CAAA,KAAM;IACzBL,QAAQ,CAAC;MACPC,UAAU,EAAE,KAAK;MACjBC,QAAQ,EAAE,IAAI;MACdV,QAAQ,EAAE,EAAE;MACZC,YAAY,EAAE,EAAE;MAChBC,OAAO,EAAE,KAAK;MACdC,KAAK,EAAE;IACT,CAAC,CAAC;IACFG,SAAS,CAAC,CAAC;EACb,CAAC;;EAED;EACA,MAAMQ,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAIP,KAAK,CAACG,QAAQ,EAAE;MAClB,MAAML,WAAW,CAACE,KAAK,CAACG,QAAQ,CAAC;IACnC;EACF,CAAC;EAED,oBACEb,OAAA;IAAKkB,SAAS,EAAC,KAAK;IAAAC,QAAA,eAClBnB,OAAA;MAAKkB,SAAS,EAAC,WAAW;MAAAC,QAAA,gBACxBnB,OAAA;QAAIkB,SAAS,EAAC,kBAAkB;QAAAC,QAAA,EAAC;MAAO;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EAE5C,CAACb,KAAK,CAACE,UAAU,gBAChBZ,OAAA,CAACJ,SAAS;QAAC4B,OAAO,EAAEV;MAAY;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,gBAEnCvB,OAAA,CAACH,SAAS;QACRa,KAAK,EAAE;UACL,GAAGA,KAAK;UACRP,QAAQ;UACRC,YAAY;UACZC,OAAO;UACPC;QACF,CAAE;QACFmB,QAAQ,EAAET,YAAa;QACvBU,SAAS,EAAET;MAAc;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC1B,CACF;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACrB,EAAA,CA/EQD,GAAG;EAAA,QAUNH,aAAa;AAAA;AAAA6B,EAAA,GAVV1B,GAAG;AAiFZ,eAAeA,GAAG;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}