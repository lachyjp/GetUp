{"ast":null,"code":"import axios from 'axios';\n// API Configuration\nconst API_CONFIG = {\n  baseURL: 'https://api.up.com.au/api/v1',\n  timeout: 30000,\n  retryAttempts: 3,\n  retryDelay: 1000,\n  cacheTime: 5 * 60 * 1000 // 5 minutes\n};\n\n// Cache for API responses\nconst cache = new Map();\n\n// API Service Class\nclass UpBankApiService {\n  constructor() {\n    this.apiKey = '';\n  }\n  // Set API key for authentication\n  setApiKey(apiKey) {\n    this.apiKey = apiKey;\n  }\n\n  // Get cached data if valid\n  getCachedData(key) {\n    const cached = cache.get(key);\n    if (cached && Date.now() - cached.timestamp < API_CONFIG.cacheTime) {\n      return cached.data;\n    }\n    return null;\n  }\n\n  // Set cached data\n  setCachedData(key, data) {\n    cache.set(key, {\n      data,\n      timestamp: Date.now()\n    });\n  }\n\n  // Retry logic with exponential backoff\n  async retryRequest(requestFn, context) {\n    let lastError;\n    for (let attempt = 0; attempt < API_CONFIG.retryAttempts; attempt++) {\n      try {\n        return await requestFn();\n      } catch (error) {\n        lastError = error;\n        if (attempt === API_CONFIG.retryAttempts - 1) {\n          console.error(`${context} failed after ${API_CONFIG.retryAttempts} attempts:`, error);\n          throw error;\n        }\n        const delay = API_CONFIG.retryDelay * Math.pow(2, attempt);\n        console.warn(`${context} attempt ${attempt + 1} failed, retrying in ${delay}ms...`);\n        await new Promise(resolve => setTimeout(resolve, delay));\n      }\n    }\n    throw lastError;\n  }\n\n  // Validate API response structure\n  validateApiResponse(response, expectedType) {\n    if (!response || typeof response !== 'object') return false;\n    if (expectedType === 'accounts') {\n      return response.data && Array.isArray(response.data) && response.data.length > 0 && response.data[0].attributes && response.data[0].attributes.displayName;\n    }\n    if (expectedType === 'transactions') {\n      return response.data && Array.isArray(response.data) && response.data.length > 0 && response.data[0].attributes && response.data[0].attributes.description;\n    }\n    return false;\n  }\n\n  // Handle API errors\n  handleApiError(error) {\n    var _data$errors, _data$errors$;\n    if (error.response) {\n      const {\n        status,\n        data\n      } = error.response;\n      switch (status) {\n        case 401:\n          return '🔐 Authentication failed. Please check your API key and try again.';\n        case 403:\n          return '🚫 Access denied. Your API key may not have the required permissions.';\n        case 429:\n          return '⏱️ Too many requests. Please wait a moment and try again.';\n        case 500:\n        case 502:\n        case 503:\n          return '🔧 Server error. Please try again later.';\n        default:\n          return `❌ Error ${status}: ${(data === null || data === void 0 ? void 0 : (_data$errors = data.errors) === null || _data$errors === void 0 ? void 0 : (_data$errors$ = _data$errors[0]) === null || _data$errors$ === void 0 ? void 0 : _data$errors$.title) || 'Unknown error occurred'}`;\n      }\n    } else if (error.request) {\n      return '🌐 Network error. Please check your internet connection and try again.';\n    } else {\n      return `❌ Error: ${error.message}`;\n    }\n  }\n\n  // Fetch accounts from Up Bank API\n  async fetchAccounts() {\n    try {\n      // Check cache first\n      const cacheKey = `accounts_${this.apiKey}`;\n      const cachedData = this.getCachedData(cacheKey);\n      if (cachedData) {\n        console.log('Using cached accounts data');\n        return {\n          success: true,\n          data: cachedData\n        };\n      }\n      const response = await this.retryRequest(() => axios.get(`${API_CONFIG.baseURL}/accounts`, {\n        headers: {\n          Authorization: `Bearer ${this.apiKey}`\n        },\n        timeout: API_CONFIG.timeout\n      }), 'Accounts fetch');\n      if (!this.validateApiResponse(response.data, 'accounts')) {\n        return {\n          success: false,\n          error: 'Invalid response format from Up API'\n        };\n      }\n\n      // Process accounts data\n      const accounts = response.data.data.map(item => ({\n        id: item.id,\n        name: item.attributes.displayName,\n        balance: parseFloat(item.attributes.balance.value),\n        type: item.attributes.accountType,\n        owner: item.attributes.ownershipType\n      }));\n\n      // Cache the results\n      this.setCachedData(cacheKey, accounts);\n      return {\n        success: true,\n        data: accounts\n      };\n    } catch (error) {\n      const errorMessage = this.handleApiError(error);\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  }\n\n  // Fetch transactions from Up Bank API\n  async fetchTransactions(transactionCount) {\n    try {\n      // Check cache first\n      const cacheKey = `transactions_${this.apiKey}_${transactionCount}`;\n      const cachedData = this.getCachedData(cacheKey);\n      if (cachedData) {\n        console.log('Using cached transactions data');\n        return {\n          success: true,\n          data: cachedData\n        };\n      }\n      const response = await this.retryRequest(() => axios.get(`${API_CONFIG.baseURL}/transactions?page[size]=${transactionCount}`, {\n        headers: {\n          Authorization: `Bearer ${this.apiKey}`\n        },\n        timeout: API_CONFIG.timeout\n      }), 'Transactions fetch');\n      if (!this.validateApiResponse(response.data, 'transactions')) {\n        return {\n          success: false,\n          error: 'Invalid response format from Up API'\n        };\n      }\n\n      // Process transactions data\n      const transactions = response.data.data.slice(4) // Skip first 4 items (as in original)\n      .map(item => {\n        const amount = parseFloat(item.attributes.amount.value);\n        const isPositive = amount >= 0;\n\n        // Format date and time\n        const [date, time] = item.attributes.createdAt.split('T');\n        const formattedTime = this.formatTime(time);\n        return {\n          id: item.id,\n          description: item.attributes.description,\n          amount: Math.abs(amount),\n          type: isPositive ? '+' : '',\n          status: item.attributes.status,\n          date: date,\n          time: formattedTime,\n          text: item.attributes.rawText || 'N/A',\n          message: item.attributes.message || 'N/A',\n          roundup: item.attributes.roundUp ? 'true' : 'false'\n        };\n      });\n\n      // Cache the results\n      this.setCachedData(cacheKey, transactions);\n      return {\n        success: true,\n        data: transactions\n      };\n    } catch (error) {\n      const errorMessage = this.handleApiError(error);\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  }\n\n  // Format time (from original utils.js)\n  formatTime(time) {\n    let shortTime = time.split('+')[0].slice(0, 5);\n    if (shortTime.charAt(0) === '0') {\n      shortTime = shortTime.slice(1, 5);\n    }\n    const hour = parseInt(shortTime.slice(0, 2));\n    if (hour < 12) {\n      shortTime = shortTime + 'am';\n    } else {\n      shortTime = shortTime + 'pm';\n    }\n    if (hour > 12) {\n      const pmTime = hour - 12;\n      shortTime = pmTime + shortTime.slice(2);\n    }\n    return shortTime;\n  }\n\n  // Clear cache\n  clearCache() {\n    cache.clear();\n  }\n\n  // Fetch all data (accounts + transactions)\n  async fetchAllData(transactionCount) {\n    const [accountsResult, transactionsResult] = await Promise.all([this.fetchAccounts(), this.fetchTransactions(transactionCount)]);\n    return {\n      accounts: accountsResult,\n      transactions: transactionsResult\n    };\n  }\n}\n\n// Export singleton instance\nexport const upBankApi = new UpBankApiService();\nexport default upBankApi;","map":{"version":3,"names":["axios","API_CONFIG","baseURL","timeout","retryAttempts","retryDelay","cacheTime","cache","Map","UpBankApiService","constructor","apiKey","setApiKey","getCachedData","key","cached","get","Date","now","timestamp","data","setCachedData","set","retryRequest","requestFn","context","lastError","attempt","error","console","delay","Math","pow","warn","Promise","resolve","setTimeout","validateApiResponse","response","expectedType","Array","isArray","length","attributes","displayName","description","handleApiError","_data$errors","_data$errors$","status","errors","title","request","message","fetchAccounts","cacheKey","cachedData","log","success","headers","Authorization","accounts","map","item","id","name","balance","parseFloat","value","type","accountType","owner","ownershipType","errorMessage","fetchTransactions","transactionCount","transactions","slice","amount","isPositive","date","time","createdAt","split","formattedTime","formatTime","abs","text","rawText","roundup","roundUp","shortTime","charAt","hour","parseInt","pmTime","clearCache","clear","fetchAllData","accountsResult","transactionsResult","all","upBankApi"],"sources":["C:/Users/inbox/My Files/GitHub/GetUp/src/services/apiService.ts"],"sourcesContent":["import axios, { AxiosResponse } from 'axios';\r\nimport { Account, Transaction } from '../App';\r\n\r\n// API Configuration\r\nconst API_CONFIG = {\r\n  baseURL: 'https://api.up.com.au/api/v1',\r\n  timeout: 30000,\r\n  retryAttempts: 3,\r\n  retryDelay: 1000,\r\n  cacheTime: 5 * 60 * 1000, // 5 minutes\r\n};\r\n\r\n// Cache for API responses\r\nconst cache = new Map<string, { data: any; timestamp: number }>();\r\n\r\n// API Service Class\r\nclass UpBankApiService {\r\n  private apiKey: string = '';\r\n\r\n  // Set API key for authentication\r\n  setApiKey(apiKey: string) {\r\n    this.apiKey = apiKey;\r\n  }\r\n\r\n  // Get cached data if valid\r\n  private getCachedData(key: string): any | null {\r\n    const cached = cache.get(key);\r\n    if (cached && Date.now() - cached.timestamp < API_CONFIG.cacheTime) {\r\n      return cached.data;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // Set cached data\r\n  private setCachedData(key: string, data: any) {\r\n    cache.set(key, { data, timestamp: Date.now() });\r\n  }\r\n\r\n  // Retry logic with exponential backoff\r\n  private async retryRequest<T>(\r\n    requestFn: () => Promise<AxiosResponse<T>>,\r\n    context: string\r\n  ): Promise<AxiosResponse<T>> {\r\n    let lastError: Error;\r\n\r\n    for (let attempt = 0; attempt < API_CONFIG.retryAttempts; attempt++) {\r\n      try {\r\n        return await requestFn();\r\n      } catch (error) {\r\n        lastError = error as Error;\r\n        \r\n        if (attempt === API_CONFIG.retryAttempts - 1) {\r\n          console.error(`${context} failed after ${API_CONFIG.retryAttempts} attempts:`, error);\r\n          throw error;\r\n        }\r\n\r\n        const delay = API_CONFIG.retryDelay * Math.pow(2, attempt);\r\n        console.warn(`${context} attempt ${attempt + 1} failed, retrying in ${delay}ms...`);\r\n        \r\n        await new Promise(resolve => setTimeout(resolve, delay));\r\n      }\r\n    }\r\n\r\n    throw lastError!;\r\n  }\r\n\r\n  // Validate API response structure\r\n  private validateApiResponse(response: any, expectedType: 'accounts' | 'transactions'): boolean {\r\n    if (!response || typeof response !== 'object') return false;\r\n    \r\n    if (expectedType === 'accounts') {\r\n      return response.data && \r\n             Array.isArray(response.data) && \r\n             response.data.length > 0 && \r\n             response.data[0].attributes && \r\n             response.data[0].attributes.displayName;\r\n    }\r\n    \r\n    if (expectedType === 'transactions') {\r\n      return response.data && \r\n             Array.isArray(response.data) && \r\n             response.data.length > 0 && \r\n             response.data[0].attributes && \r\n             response.data[0].attributes.description;\r\n    }\r\n    \r\n    return false;\r\n  }\r\n\r\n  // Handle API errors\r\n  private handleApiError(error: any): string {\r\n    if (error.response) {\r\n      const { status, data } = error.response;\r\n      \r\n      switch (status) {\r\n        case 401:\r\n          return '🔐 Authentication failed. Please check your API key and try again.';\r\n        case 403:\r\n          return '🚫 Access denied. Your API key may not have the required permissions.';\r\n        case 429:\r\n          return '⏱️ Too many requests. Please wait a moment and try again.';\r\n        case 500:\r\n        case 502:\r\n        case 503:\r\n          return '🔧 Server error. Please try again later.';\r\n        default:\r\n          return `❌ Error ${status}: ${data?.errors?.[0]?.title || 'Unknown error occurred'}`;\r\n      }\r\n    } else if (error.request) {\r\n      return '🌐 Network error. Please check your internet connection and try again.';\r\n    } else {\r\n      return `❌ Error: ${error.message}`;\r\n    }\r\n  }\r\n\r\n  // Fetch accounts from Up Bank API\r\n  async fetchAccounts(): Promise<{ success: boolean; data?: Account[]; error?: string }> {\r\n    try {\r\n      // Check cache first\r\n      const cacheKey = `accounts_${this.apiKey}`;\r\n      const cachedData = this.getCachedData(cacheKey);\r\n      if (cachedData) {\r\n        console.log('Using cached accounts data');\r\n        return { success: true, data: cachedData };\r\n      }\r\n\r\n      const response = await this.retryRequest(\r\n        () => axios.get(`${API_CONFIG.baseURL}/accounts`, {\r\n          headers: { Authorization: `Bearer ${this.apiKey}` },\r\n          timeout: API_CONFIG.timeout,\r\n        }),\r\n        'Accounts fetch'\r\n      );\r\n\r\n      if (!this.validateApiResponse(response.data, 'accounts')) {\r\n        return { success: false, error: 'Invalid response format from Up API' };\r\n      }\r\n\r\n      // Process accounts data\r\n      const accounts: Account[] = response.data.data.map((item: any) => ({\r\n        id: item.id,\r\n        name: item.attributes.displayName,\r\n        balance: parseFloat(item.attributes.balance.value),\r\n        type: item.attributes.accountType,\r\n        owner: item.attributes.ownershipType,\r\n      }));\r\n\r\n      // Cache the results\r\n      this.setCachedData(cacheKey, accounts);\r\n\r\n      return { success: true, data: accounts };\r\n    } catch (error) {\r\n      const errorMessage = this.handleApiError(error);\r\n      return { success: false, error: errorMessage };\r\n    }\r\n  }\r\n\r\n  // Fetch transactions from Up Bank API\r\n  async fetchTransactions(transactionCount: number): Promise<{ success: boolean; data?: Transaction[]; error?: string }> {\r\n    try {\r\n      // Check cache first\r\n      const cacheKey = `transactions_${this.apiKey}_${transactionCount}`;\r\n      const cachedData = this.getCachedData(cacheKey);\r\n      if (cachedData) {\r\n        console.log('Using cached transactions data');\r\n        return { success: true, data: cachedData };\r\n      }\r\n\r\n      const response = await this.retryRequest(\r\n        () => axios.get(`${API_CONFIG.baseURL}/transactions?page[size]=${transactionCount}`, {\r\n          headers: { Authorization: `Bearer ${this.apiKey}` },\r\n          timeout: API_CONFIG.timeout,\r\n        }),\r\n        'Transactions fetch'\r\n      );\r\n\r\n      if (!this.validateApiResponse(response.data, 'transactions')) {\r\n        return { success: false, error: 'Invalid response format from Up API' };\r\n      }\r\n\r\n      // Process transactions data\r\n      const transactions: Transaction[] = response.data.data\r\n        .slice(4) // Skip first 4 items (as in original)\r\n        .map((item: any) => {\r\n          const amount = parseFloat(item.attributes.amount.value);\r\n          const isPositive = amount >= 0;\r\n          \r\n          // Format date and time\r\n          const [date, time] = item.attributes.createdAt.split('T');\r\n          const formattedTime = this.formatTime(time);\r\n          \r\n          return {\r\n            id: item.id,\r\n            description: item.attributes.description,\r\n            amount: Math.abs(amount),\r\n            type: isPositive ? '+' : '',\r\n            status: item.attributes.status,\r\n            date: date,\r\n            time: formattedTime,\r\n            text: item.attributes.rawText || 'N/A',\r\n            message: item.attributes.message || 'N/A',\r\n            roundup: item.attributes.roundUp ? 'true' : 'false',\r\n          };\r\n        });\r\n\r\n      // Cache the results\r\n      this.setCachedData(cacheKey, transactions);\r\n\r\n      return { success: true, data: transactions };\r\n    } catch (error) {\r\n      const errorMessage = this.handleApiError(error);\r\n      return { success: false, error: errorMessage };\r\n    }\r\n  }\r\n\r\n  // Format time (from original utils.js)\r\n  private formatTime(time: string): string {\r\n    let shortTime = time.split('+')[0].slice(0, 5);\r\n    \r\n    if (shortTime.charAt(0) === '0') {\r\n      shortTime = shortTime.slice(1, 5);\r\n    }\r\n    \r\n    const hour = parseInt(shortTime.slice(0, 2));\r\n    \r\n    if (hour < 12) {\r\n      shortTime = shortTime + 'am';\r\n    } else {\r\n      shortTime = shortTime + 'pm';\r\n    }\r\n\r\n    if (hour > 12) {\r\n      const pmTime = hour - 12;\r\n      shortTime = pmTime + shortTime.slice(2);\r\n    }\r\n    \r\n    return shortTime;\r\n  }\r\n\r\n  // Clear cache\r\n  clearCache() {\r\n    cache.clear();\r\n  }\r\n\r\n  // Fetch all data (accounts + transactions)\r\n  async fetchAllData(transactionCount: number): Promise<{\r\n    accounts: { success: boolean; data?: Account[]; error?: string };\r\n    transactions: { success: boolean; data?: Transaction[]; error?: string };\r\n  }> {\r\n    const [accountsResult, transactionsResult] = await Promise.all([\r\n      this.fetchAccounts(),\r\n      this.fetchTransactions(transactionCount)\r\n    ]);\r\n\r\n    return {\r\n      accounts: accountsResult,\r\n      transactions: transactionsResult\r\n    };\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const upBankApi = new UpBankApiService();\r\nexport default upBankApi;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}