{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from 'react';\nimport upBankApi from '../services/apiService';\n\n// Hook for managing Up Bank data\nexport const useUpBankData = () => {\n  _s();\n  const [accounts, setAccounts] = useState([]);\n  const [transactions, setTransactions] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Fetch all data (accounts + transactions)\n  const fetchData = useCallback(async userData => {\n    setLoading(true);\n    setError(null);\n    try {\n      // Set API key\n      upBankApi.setApiKey(userData.apiKey);\n\n      // Fetch all data\n      const result = await upBankApi.fetchAllData(userData.transactionCount);\n\n      // Handle accounts result\n      if (result.accounts.success && result.accounts.data) {\n        setAccounts(result.accounts.data);\n      } else if (result.accounts.error) {\n        setError(result.accounts.error);\n        return;\n      }\n\n      // Handle transactions result\n      if (result.transactions.success && result.transactions.data) {\n        setTransactions(result.transactions.data);\n      } else if (result.transactions.error) {\n        setError(result.transactions.error);\n        return;\n      }\n    } catch (err) {\n      setError('Failed to fetch data. Please check your API key and try again.');\n      console.error('Error fetching data:', err);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Refresh data (force refresh, bypass cache)\n  const refreshData = useCallback(async userData => {\n    setLoading(true);\n    setError(null);\n    try {\n      // Clear cache to force refresh\n      upBankApi.clearCache();\n\n      // Set API key\n      upBankApi.setApiKey(userData.apiKey);\n\n      // Fetch all data\n      const result = await upBankApi.fetchAllData(userData.transactionCount);\n\n      // Handle accounts result\n      if (result.accounts.success && result.accounts.data) {\n        setAccounts(result.accounts.data);\n      } else if (result.accounts.error) {\n        setError(result.accounts.error);\n        return;\n      }\n\n      // Handle transactions result\n      if (result.transactions.success && result.transactions.data) {\n        setTransactions(result.transactions.data);\n      } else if (result.transactions.error) {\n        setError(result.transactions.error);\n        return;\n      }\n    } catch (err) {\n      setError('Failed to refresh data. Please try again.');\n      console.error('Error refreshing data:', err);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Clear all data\n  const clearData = useCallback(() => {\n    setAccounts([]);\n    setTransactions([]);\n    setError(null);\n    setLoading(false);\n  }, []);\n  return {\n    accounts,\n    transactions,\n    loading,\n    error,\n    fetchData,\n    refreshData,\n    clearData\n  };\n};\n_s(useUpBankData, \"DTX5O6JY88MOUDwKDaOZdUZgJ/A=\");","map":{"version":3,"names":["useState","useCallback","upBankApi","useUpBankData","_s","accounts","setAccounts","transactions","setTransactions","loading","setLoading","error","setError","fetchData","userData","setApiKey","apiKey","result","fetchAllData","transactionCount","success","data","err","console","refreshData","clearCache","clearData"],"sources":["C:/Users/inbox/My Files/GitHub/GetUp/src/hooks/useUpBankData.ts"],"sourcesContent":["import { useState, useCallback } from 'react';\r\nimport { Account, Transaction, UserData } from '../App';\r\nimport upBankApi from '../services/apiService';\r\n\r\n// Hook for managing Up Bank data\r\nexport const useUpBankData = () => {\r\n  const [accounts, setAccounts] = useState<Account[]>([]);\r\n  const [transactions, setTransactions] = useState<Transaction[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // Fetch all data (accounts + transactions)\r\n  const fetchData = useCallback(async (userData: UserData) => {\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      // Set API key\r\n      upBankApi.setApiKey(userData.apiKey);\r\n\r\n      // Fetch all data\r\n      const result = await upBankApi.fetchAllData(userData.transactionCount);\r\n\r\n      // Handle accounts result\r\n      if (result.accounts.success && result.accounts.data) {\r\n        setAccounts(result.accounts.data);\r\n      } else if (result.accounts.error) {\r\n        setError(result.accounts.error);\r\n        return;\r\n      }\r\n\r\n      // Handle transactions result\r\n      if (result.transactions.success && result.transactions.data) {\r\n        setTransactions(result.transactions.data);\r\n      } else if (result.transactions.error) {\r\n        setError(result.transactions.error);\r\n        return;\r\n      }\r\n\r\n    } catch (err) {\r\n      setError('Failed to fetch data. Please check your API key and try again.');\r\n      console.error('Error fetching data:', err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  // Refresh data (force refresh, bypass cache)\r\n  const refreshData = useCallback(async (userData: UserData) => {\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      // Clear cache to force refresh\r\n      upBankApi.clearCache();\r\n      \r\n      // Set API key\r\n      upBankApi.setApiKey(userData.apiKey);\r\n\r\n      // Fetch all data\r\n      const result = await upBankApi.fetchAllData(userData.transactionCount);\r\n\r\n      // Handle accounts result\r\n      if (result.accounts.success && result.accounts.data) {\r\n        setAccounts(result.accounts.data);\r\n      } else if (result.accounts.error) {\r\n        setError(result.accounts.error);\r\n        return;\r\n      }\r\n\r\n      // Handle transactions result\r\n      if (result.transactions.success && result.transactions.data) {\r\n        setTransactions(result.transactions.data);\r\n      } else if (result.transactions.error) {\r\n        setError(result.transactions.error);\r\n        return;\r\n      }\r\n\r\n    } catch (err) {\r\n      setError('Failed to refresh data. Please try again.');\r\n      console.error('Error refreshing data:', err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  // Clear all data\r\n  const clearData = useCallback(() => {\r\n    setAccounts([]);\r\n    setTransactions([]);\r\n    setError(null);\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  return {\r\n    accounts,\r\n    transactions,\r\n    loading,\r\n    error,\r\n    fetchData,\r\n    refreshData,\r\n    clearData,\r\n  };\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}