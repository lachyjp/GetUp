{"ast":null,"code":"import platform from \"../platform/index.js\";\nimport utils from \"../utils.js\";\nimport isURLSameOrigin from \"./isURLSameOrigin.js\";\nimport cookies from \"./cookies.js\";\nimport buildFullPath from \"../core/buildFullPath.js\";\nimport mergeConfig from \"../core/mergeConfig.js\";\nimport AxiosHeaders from \"../core/AxiosHeaders.js\";\nimport buildURL from \"./buildURL.js\";\nexport default config => {\n  const newConfig = mergeConfig({}, config);\n  let {\n    data,\n    withXSRFToken,\n    xsrfHeaderName,\n    xsrfCookieName,\n    headers,\n    auth\n  } = newConfig;\n  newConfig.headers = headers = AxiosHeaders.from(headers);\n  newConfig.url = buildURL(buildFullPath(newConfig.baseURL, newConfig.url, newConfig.allowAbsoluteUrls), config.params, config.paramsSerializer);\n\n  // HTTP basic authentication\n  if (auth) {\n    headers.set('Authorization', 'Basic ' + btoa((auth.username || '') + ':' + (auth.password ? unescape(encodeURIComponent(auth.password)) : '')));\n  }\n  if (utils.isFormData(data)) {\n    if (platform.hasStandardBrowserEnv || platform.hasStandardBrowserWebWorkerEnv) {\n      headers.setContentType(undefined); // browser handles it\n    } else if (utils.isFunction(data.getHeaders)) {\n      // Node.js FormData (like form-data package)\n      const formHeaders = data.getHeaders();\n      // Only set safe headers to avoid overwriting security headers\n      const allowedHeaders = ['content-type', 'content-length'];\n      Object.entries(formHeaders).forEach(([key, val]) => {\n        if (allowedHeaders.includes(key.toLowerCase())) {\n          headers.set(key, val);\n        }\n      });\n    }\n  }\n\n  // Add xsrf header\n  // This is only done if running in a standard browser environment.\n  // Specifically not if we're in a web worker, or react-native.\n\n  if (platform.hasStandardBrowserEnv) {\n    withXSRFToken && utils.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(newConfig));\n    if (withXSRFToken || withXSRFToken !== false && isURLSameOrigin(newConfig.url)) {\n      // Add xsrf header\n      const xsrfValue = xsrfHeaderName && xsrfCookieName && cookies.read(xsrfCookieName);\n      if (xsrfValue) {\n        headers.set(xsrfHeaderName, xsrfValue);\n      }\n    }\n  }\n  return newConfig;\n};","map":{"version":3,"names":["platform","utils","isURLSameOrigin","cookies","buildFullPath","mergeConfig","AxiosHeaders","buildURL","config","newConfig","data","withXSRFToken","xsrfHeaderName","xsrfCookieName","headers","auth","from","url","baseURL","allowAbsoluteUrls","params","paramsSerializer","set","btoa","username","password","unescape","encodeURIComponent","isFormData","hasStandardBrowserEnv","hasStandardBrowserWebWorkerEnv","setContentType","undefined","isFunction","getHeaders","formHeaders","allowedHeaders","Object","entries","forEach","key","val","includes","toLowerCase","xsrfValue","read"],"sources":["C:/Users/inbox/My Files/GitHub/GetUp/node_modules/axios/lib/helpers/resolveConfig.js"],"sourcesContent":["import platform from \"../platform/index.js\";\nimport utils from \"../utils.js\";\nimport isURLSameOrigin from \"./isURLSameOrigin.js\";\nimport cookies from \"./cookies.js\";\nimport buildFullPath from \"../core/buildFullPath.js\";\nimport mergeConfig from \"../core/mergeConfig.js\";\nimport AxiosHeaders from \"../core/AxiosHeaders.js\";\nimport buildURL from \"./buildURL.js\";\n\nexport default (config) => {\n  const newConfig = mergeConfig({}, config);\n\n  let { data, withXSRFToken, xsrfHeaderName, xsrfCookieName, headers, auth } = newConfig;\n\n  newConfig.headers = headers = AxiosHeaders.from(headers);\n\n  newConfig.url = buildURL(buildFullPath(newConfig.baseURL, newConfig.url, newConfig.allowAbsoluteUrls), config.params, config.paramsSerializer);\n\n  // HTTP basic authentication\n  if (auth) {\n    headers.set('Authorization', 'Basic ' +\n      btoa((auth.username || '') + ':' + (auth.password ? unescape(encodeURIComponent(auth.password)) : ''))\n    );\n  }\n\n  if (utils.isFormData(data)) {\n    if (platform.hasStandardBrowserEnv || platform.hasStandardBrowserWebWorkerEnv) {\n      headers.setContentType(undefined); // browser handles it\n    } else if (utils.isFunction(data.getHeaders)) {\n      // Node.js FormData (like form-data package)\n      const formHeaders = data.getHeaders();\n      // Only set safe headers to avoid overwriting security headers\n      const allowedHeaders = ['content-type', 'content-length'];\n      Object.entries(formHeaders).forEach(([key, val]) => {\n        if (allowedHeaders.includes(key.toLowerCase())) {\n          headers.set(key, val);\n        }\n      });\n    }\n  }  \n\n  // Add xsrf header\n  // This is only done if running in a standard browser environment.\n  // Specifically not if we're in a web worker, or react-native.\n\n  if (platform.hasStandardBrowserEnv) {\n    withXSRFToken && utils.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(newConfig));\n\n    if (withXSRFToken || (withXSRFToken !== false && isURLSameOrigin(newConfig.url))) {\n      // Add xsrf header\n      const xsrfValue = xsrfHeaderName && xsrfCookieName && cookies.read(xsrfCookieName);\n\n      if (xsrfValue) {\n        headers.set(xsrfHeaderName, xsrfValue);\n      }\n    }\n  }\n\n  return newConfig;\n}\n\n"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,sBAAsB;AAC3C,OAAOC,KAAK,MAAM,aAAa;AAC/B,OAAOC,eAAe,MAAM,sBAAsB;AAClD,OAAOC,OAAO,MAAM,cAAc;AAClC,OAAOC,aAAa,MAAM,0BAA0B;AACpD,OAAOC,WAAW,MAAM,wBAAwB;AAChD,OAAOC,YAAY,MAAM,yBAAyB;AAClD,OAAOC,QAAQ,MAAM,eAAe;AAEpC,eAAgBC,MAAM,IAAK;EACzB,MAAMC,SAAS,GAAGJ,WAAW,CAAC,CAAC,CAAC,EAAEG,MAAM,CAAC;EAEzC,IAAI;IAAEE,IAAI;IAAEC,aAAa;IAAEC,cAAc;IAAEC,cAAc;IAAEC,OAAO;IAAEC;EAAK,CAAC,GAAGN,SAAS;EAEtFA,SAAS,CAACK,OAAO,GAAGA,OAAO,GAAGR,YAAY,CAACU,IAAI,CAACF,OAAO,CAAC;EAExDL,SAAS,CAACQ,GAAG,GAAGV,QAAQ,CAACH,aAAa,CAACK,SAAS,CAACS,OAAO,EAAET,SAAS,CAACQ,GAAG,EAAER,SAAS,CAACU,iBAAiB,CAAC,EAAEX,MAAM,CAACY,MAAM,EAAEZ,MAAM,CAACa,gBAAgB,CAAC;;EAE9I;EACA,IAAIN,IAAI,EAAE;IACRD,OAAO,CAACQ,GAAG,CAAC,eAAe,EAAE,QAAQ,GACnCC,IAAI,CAAC,CAACR,IAAI,CAACS,QAAQ,IAAI,EAAE,IAAI,GAAG,IAAIT,IAAI,CAACU,QAAQ,GAAGC,QAAQ,CAACC,kBAAkB,CAACZ,IAAI,CAACU,QAAQ,CAAC,CAAC,GAAG,EAAE,CAAC,CACvG,CAAC;EACH;EAEA,IAAIxB,KAAK,CAAC2B,UAAU,CAAClB,IAAI,CAAC,EAAE;IAC1B,IAAIV,QAAQ,CAAC6B,qBAAqB,IAAI7B,QAAQ,CAAC8B,8BAA8B,EAAE;MAC7EhB,OAAO,CAACiB,cAAc,CAACC,SAAS,CAAC,CAAC,CAAC;IACrC,CAAC,MAAM,IAAI/B,KAAK,CAACgC,UAAU,CAACvB,IAAI,CAACwB,UAAU,CAAC,EAAE;MAC5C;MACA,MAAMC,WAAW,GAAGzB,IAAI,CAACwB,UAAU,CAAC,CAAC;MACrC;MACA,MAAME,cAAc,GAAG,CAAC,cAAc,EAAE,gBAAgB,CAAC;MACzDC,MAAM,CAACC,OAAO,CAACH,WAAW,CAAC,CAACI,OAAO,CAAC,CAAC,CAACC,GAAG,EAAEC,GAAG,CAAC,KAAK;QAClD,IAAIL,cAAc,CAACM,QAAQ,CAACF,GAAG,CAACG,WAAW,CAAC,CAAC,CAAC,EAAE;UAC9C7B,OAAO,CAACQ,GAAG,CAACkB,GAAG,EAAEC,GAAG,CAAC;QACvB;MACF,CAAC,CAAC;IACJ;EACF;;EAEA;EACA;EACA;;EAEA,IAAIzC,QAAQ,CAAC6B,qBAAqB,EAAE;IAClClB,aAAa,IAAIV,KAAK,CAACgC,UAAU,CAACtB,aAAa,CAAC,KAAKA,aAAa,GAAGA,aAAa,CAACF,SAAS,CAAC,CAAC;IAE9F,IAAIE,aAAa,IAAKA,aAAa,KAAK,KAAK,IAAIT,eAAe,CAACO,SAAS,CAACQ,GAAG,CAAE,EAAE;MAChF;MACA,MAAM2B,SAAS,GAAGhC,cAAc,IAAIC,cAAc,IAAIV,OAAO,CAAC0C,IAAI,CAAChC,cAAc,CAAC;MAElF,IAAI+B,SAAS,EAAE;QACb9B,OAAO,CAACQ,GAAG,CAACV,cAAc,EAAEgC,SAAS,CAAC;MACxC;IACF;EACF;EAEA,OAAOnC,SAAS;AAClB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}